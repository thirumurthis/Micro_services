Micro service 

   Distribution tax - Network latency
   can be addressed by using Reactive approach.
   
Communication between service in leverged using REST over Http way.
Other methods like Event based communication, but note inter-service calls are REST HTTP.

Service Documentation
    Developing documentation of services is critical.
    
In a Microservice size is not critical as operation.
    **- one set of related function, with little or no cross domain operations.

Concept: 
   > 'Domain Dirven Design'

Comparing analogy:

OOPs                                        
Class is build to handle one
type of thing and provide the operation for that type.

Micro-services
> Service operates on well defined domain. Operation aren't defined
as on the data objects or business objects instead a domain as whole.

> very low level data focus service, often this service exposes domain 
specific CRUD operations.
> That domain can span multiple data objects.
> Can built service for set of related business operation that can span one 
or more domain.

Service Design Anti-Patterns
     * Too fine grained (usually this is most implementation and 
     cases distribution tax - latency issue)
     * Not fine grained enough
     
Size of the services causes this.
Small size : build faster, few test scenario, deploy and start much faster. 
mistakes can be fixed quicker.

-------------

In Microservice architechture the communication between services is through 
HTTP using REST.
This allows for use of any coding language or framework that supports RestFul serices.

Each service can consume any other service over the same communication startegy.
This strategy is called, protocol-Aware Heterogeneous interopertability.

Protocol-aware heterogeneous interoperability, explains that the 
services are bound to a protocol, in this case HTTP, and execute communication over 
that protocol in a way that works in a mixed, or heterogeneous, environment.

Problem is network calls.

Orechstration is key, each service must maintain certain level of passivity in the API.
or there is a system failure, since there is no deliniation on which service is calling 
which service, there must be solid versioning stratergy or perfect passive API.
So the calling system will not fail.

Calling system from failing when releasing new version of API.

*** Strong versioning startegy along strong passivity rules. ***

Communication pattern:
    Distribution on a single datacenter is not a mandate or requirement.
  

 





